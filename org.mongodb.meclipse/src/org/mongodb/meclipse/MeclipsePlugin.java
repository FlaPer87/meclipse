package org.mongodb.meclipse;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.mongodb.meclipse.views.objects.Connection;
import org.osgi.framework.Bundle;
import org.osgi.framework.BundleContext;

import com.mongodb.Mongo;

/**
 * The activator class controls the plug-in life cycle
 * @author Flavio [FlaPer87] Percoco Premoli
 */
public class MeclipsePlugin extends AbstractUIPlugin {

	// The plug-in ID
	public static final String PLUGIN_ID = "org.mongodb.meclipse";
	
	private Map<String, Mongo> connections = new HashMap<String, Mongo>();

	// The shared instance
	private static MeclipsePlugin plugin;
	
	/**
	 * The constructor
	 */
	public MeclipsePlugin() {
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
		plugin = this;
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
	 */
	public void stop(BundleContext context) throws Exception {
		plugin = null;
		super.stop(context);
	}

	/**
	 * Returns the shared instance
	 *
	 * @return the shared instance
	 */
	public static MeclipsePlugin getDefault() {
		return plugin;
	}
	
	/**
	 * Taken from EclipseTracPlugin
	 * 
     * Returns an image descriptor for the image file at the given plug-in
     * relative path
     * 
     * @param path
     *            the path
     * @return the image descriptor
     */
    protected static ImageDescriptor getImageDescriptor( String path )
    {
        return imageDescriptorFromPlugin( PLUGIN_ID, path );
    }
    
	// IMAGE HANDLING
	public static final String COLLECTION_IMG_ID =	"./icons/table.png";
	public static final String CONNECTION_IMG_ID =	"./icons/leaf.png";
	public static final String DATABASE_IMG_ID =	"./icons/database.png";
	
	final List<String> IMG_ID_LIST =
		new ArrayList<String> ()
		{
			/**
			 * Generated by Eclipse
			 */
			private static final long serialVersionUID = 666142153396600669L;

			{
				add (COLLECTION_IMG_ID);
				add (CONNECTION_IMG_ID);
				add (DATABASE_IMG_ID);
			}
		};
		
		@Override
		protected void initializeImageRegistry(ImageRegistry registry)
		{
			super.initializeImageRegistry(registry);
			Bundle bundle = Platform.getBundle(PLUGIN_ID);
			for (String img_id : IMG_ID_LIST)
			{
				ImageDescriptor myImage = ImageDescriptor.createFromURL(
						FileLocator.find(bundle, new Path(img_id), null));
				registry.put(img_id, myImage);
			}
		}

		public void addMongo(String name, Mongo conn) {
			this.connections.put(name, conn);
		}
		
		public Mongo getMongo(String name)
		{
			return connections.get(name);
		}

		public String [] getMongoNames() {
			return connections.keySet().toArray(new String[connections.size()]);
		}
}
